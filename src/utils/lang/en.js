/*
 * English language Pack
 */
/* eslint-disable */
export default {
  public: { 
    
  },
  error: {
    error3080001: 'Failed. Account needs more than allotted RAM usage',
    error3080002: 'Failed. Transaction exceeded the current network usage limit imposed on the transaction',
    error3080004: 'Failed. Transaction exceeded the current CPU usage limit imposed on the transaction',
    error3040005: 'Operation overdue. Please try again.',
    error3050003: 'Account does not exist, the amount of assets is incorrect, etc.',
    error3090003: 'Permission lost',
  },
  toastTip: { 
    success: 'Operate Successfully',
    fail: 'Operate Unsuccessfully',
  },
  resources: {
    resources: 'Resources',
    data: 'Data',
    mainData: 'Key Data',
    rexPoolCount: 'The amount of REX exclusive EOS pool',
    allNetRexThroughput: 'REX Circulation',
    rexFormula: 'REX Price Formula',
    rexIncome: 'REX Income',
    rentalOfResources: 'Rental',
    rexFee: 'RAM Fee',
    shortNameFee: 'Bidname Income',
    yearRate: 'Estimated APR',
    rentalInfo: 'Leasing Situation',
    leasedEos: 'EOS Rented',
    abledLeasedEos: 'EOS Rentable',
    leasedRate: 'Rent Ratio',
    rexPoolCountTip: 'EOS of Buying REX+Rent + RAM fee + bidname income',
    rexPrice: 'REX Price',
    buyRexNote: 'REX Trading(Buy) Instruction',
    sellRexNote: 'REX Trading(Sell) Instruction',
    buyRexNote_1: '· Before buying REX, you need to vote for at least 21 BPs or delegate the vote to one proxy account;',
    buyRexNote_2: '· If your votes do not meet the requirements, Newdex will delegate your votes to proxy account by default when buying REX;',
    buyRexNote_3: '· After buying REX, you can sell in exchange for EOS after  locking 4 days.',
    sellRexNote_3: '· When selling REX, if most of  EOS are rent in the REX exclusive EOS pool, not enough to pay, you need to wait for new users to buy REX or the expiration of resource rent (maximum of 30 days).',
    rexInfo_1_1: 'In May 2019, the EOS mainnet launched the system-level resource leasing market (CPU/NET) officially,',
    rexInfo_1_2: 'and REX can be bought/sold as the only benefit token.',
    rexInfo_1_3: '',
    rexInfo_2_1: 'According to the rules,',
    rexInfo_2_2: 'the price of REX will not fall,',
    rexInfo_2_3: 'so people holding REX will have stable income. The longer you hold, the more profits you will gain.',
    rexInfo_3_1: 'Buying REX,',
    rexInfo_3_2: 'EOS is directly put in REX exclusive EOS pool, and EOS main network rent out uniformly.',
    rexInfo_4_1: 'Selling REX,',
    rexInfo_4_2: 'the difference between the sale and purchase is the return on income from holding REX.',
    rexInfo_5_1: 'REX\'s income has three parts:',
    rexInfo_5_2: 'rent + RAM fee + bidname income,',
    rexInfo_5_3: 'and the corresponding EOS will also be put in REX exclusive EOS pool.',
    buyPrice: 'Price',
    sellPrice: 'Price',
    buyNum: 'Amount',
    sellNum: 'Amount',
    abledEos: 'Available EOS ',
    abledSellRex: 'Sellable REX',
    abledSellRam: 'Sellable KB',
    ramBalance: 'KB Balance',
    ramTradeNote: 'RAM Trading Instruction',
    trade: 'Trading Amt',
    formula: 'RAM Price Formula',
    formulaTitle: 'The price fo RAM is calculated with Bancor Algorithm, which is simplified as follows after derivation:',
    RAMPrice: 'RAM Price',
    EOSPool: 'EOS Pool Allowance',
    Unallocated: 'Network-wide Unallocated RAM',
    ramBuyTitle: 'RAM Trading(Buy) Instruction',
    buyRAM: 'The price of RAM is always changing, so the exchange result is estimated by current price.',
    ramSellTitle: 'REX Trading(Sell) Instruction',
    sellRAM1: 'The price of RAM is always changing, so the exchange result is estimated by current price.',
    sellRAM2: "The used RAM can't be exchanged.",
    sellRAM3: 'In order to ensure exchange success, please remain at least 1KB RAM.',
    direction: 'direction',
    amount: 'amount',
    time: 'time',
    rexBalance: 'REX Balance',
    rexTradeNote: 'Trading Instruction',
    tradeHistory: 'Order History',
    vol: 'Dealt Total',
    amt: 'Dealt Amt',
    unlock: 'Unlock',
    buyInStaked: 'Buy by Staked Resouces',
    // cpu & net
    lease: 'Lease',
    nowEosPoolCount: 'Current EOS Pool Total Amount',
    cpuLeaseTip: 'In May 2019, EOS main net launched system-level resource leasing market (CPU/NET) officially.',
    cpuLeaseTip1: 'EOS project parties/users can lease CPU/NET quickly. The main net allocates EOS in the EOS pool to be rented uniformly, and allocates the rent income through REX trading.',
    rentCpu: 'Rent CPU/NET',
    lendCpu: 'Let CPU/NET',
    rent: 'Rent ',
    lend: 'Let CPU',
    resType: 'Type',
    rentPriceLong: 'Price',
    rentTime: 'Term',
    dateLong: '30 days',
    rentNum: 'Quantity',
    inputTip: 'Enter the Renting Amount',
    rentPrice: 'Rent',
    isRenewal: 'Renewal',
    yes: 'Yes',
    no: 'Not',
    rentTip: 'Renewal Notes',
    renewalNum: 'Rent',
    inputTip2: 'Enter the Renewal Rent',
    allRentPrice: 'Total Rental',
    lendTip1_1: 'In the REX resource leasing market, ',
    lendTip1_2: 'buying REX ',
    lendTip1_3: 'can let CPU.',
    lendTip3_1: 'Buying REX, ',
    lendTip3_2: 'the difference between the sale and purchase is the return on income from holding REX.',
    toBuyRex: 'Buy REX',
    leaseOrder: 'Leasing Order',
    rentShort: 'Rent',
    renting: 'Renting',
    count: 'Quantity',
    number: 'Amt',
    leasePrice: 'Fee',
    overTime: 'Expiration Time',
    mgt: 'MGT',
    mgtRenewalNum: 'Manage Releting Fee',
    in: 'Deposit',
    out: 'Withdraw',
    inned: 'Deposited',
    inputTip3: 'Enter Amount',
    sureIn: 'Confirm',
    sureOut: 'Confirm to Retrieve',
    rentTip1: 'Reletting Amount = Reletting Fee Deposited in Advance÷Latest Price While Reletting;',
    rentTip2: 'Reletting fee can be deposited or withdrawn at any time before lease expires.',
    sure: 'Confirm',
    leaseType: 'Renting Type',
    allPrice: 'Pay the Rent',
    surePay: 'Confirm',
    renewalTip: 'Reletting Instruction',
    renewalTip1: '· After depositing the renewal rent, EOS main net will automatically renew the CPU/NET resources of same rent according to the latest price when expiration;',
    renewalTip2: '· The renewal term can be added/reduced at any time before expiration;',
    ysdApr: 'Yesterday\'s Annual Yield',
    day: 'day(s)',
    leaseTerm: 'Renewal Term',
    beginTime: 'Start Time',
    addLeaseTerm: 'Add Term',
    subLeaseTerm: 'Reduce Term',
    addRent: 'Add Rent',
    subRent: 'Return Rent',
    abledBackRwnt: 'Returnable Renewal Rent',
    leaseFail: 'Failed Renewal',
    leaseFailTip1: 'If your resource renting order relets unsuccessfully, the unused amount can be taken at any time.',
    canExtract: 'Takeable Amount',
    extractAll: 'Take All',
    fullNov: 'Comprehensive Introduction',
    useStaked: 'Buy REX by Staked Resources',
    useStakedTip: 'Redeeming the staked resources, the corresponding EOS can buy REX immediately, without waiting for the 3 days redemption period',
    stakedAccount: 'Staked Account',
    stakedAccountTip: 'You can choose different staked accounts to redeem',
    unstakedAndBuy: 'Redeem and Buy REX Now',
    actionTip: 'Please keep some resources to avoid operation failed due to insufficient resources',
    hadDays: 'Renewed Term',
    totalDays: 'Total Renewal Term',
    monthPrice: 'EOS*30days / EOS',
    thisAct: 'Current Account',
    otherAct: 'Other Account',
    xitongzy: 'System resource leasing',
    tipsResources: 'Currently, the wallets that support the lease of PowerUp model are [Dapp side] TokenPocket, MYKEY, Start, imToken; [PC side] Anchor, Scatter, Leaf wallet;',
    yjpay: 'Spend',
    zulintime: '24 hours of lease',
    topowerup: 'New resource model for leasing',
  },
  tv: {
    miao: 'S',
    minute: '1min',
    minute1: 'M',
    minute5: '5min',
    minute10: '10min',
    minute15: '15min',
    minute30: '30min',
    hour: '1hour',
    hour1: 'H',
    hour4: '4hour',
    day: '1day',
    day1: 'D',
    week: '1week',
    mon: '1mon',
    kline: 'K Line',
    depth: 'Depth',
    price: 'Entrusted Price',
    addQuantity: 'Cumulative Volume',
    timeFormat: 'Date',
    addMoney: 'Cumulative Amount',
  },
  nav: {
    fullScreen: 'fullScreen',
    fullScreenOut: 'fullScreenOut'
  }
}